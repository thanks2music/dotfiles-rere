# Prefix
set-option -g prefix C-t
unbind C-b

# View
set -g status-interval 5
set -g status-left-length 100
set -g status-right-length 50


set -g default-terminal "screen-256color"
set -g terminal-overrides 'xterm:colors=256'

set-option -g history-limit 5000
set-option -g set-titles on
set-option -g set-titles-string "#(hostname)"
if "test -d /opt/homebrew/Cellar/tmux" "set-option -g status-position top"
if "test -d /usr/local/Cellar/tmux" "set-option -g status-position top"

# Status line
set -g status-left "#[fg=green][#(whoami)]#[default] "
set -g status-right ' #[fg=green][%y/%m/%d(%a) %H:%M]#[default]'
set-option -g status-bg colour238
set-option -g status-fg white

set -g pane-active-border-style fg=white,bg=black

set-window-option -g mode-style bg=white,fg=black
set-window-option -g window-status-style bg=colour238,fg=white
set-window-option -g window-status-current-style bg=black,fg=white
set-window-option -g window-status-format " #I:#W "
set-window-option -g window-status-current-format " #I:#W "

# ウィンドウリストの色を設定する
setw -g window-status-style fg=cyan,bg=default,dim
# アクティブなウィンドウを目立たせる
setw -g window-status-current-style fg=white,bg=red,bright


# Option
set-window-option -g mode-keys vi
set-option -g base-index 1

# KeyBinding
# 綺麗に四分割
bind \, source-file ~/dotfiles/config/tmux-four-session \; display-message "In the middle of difficulty lies opportunity."
# AI同時起動で四分割
bind \. source-file ~/dotfiles/config/tmux-four-session-ai \; display-message "Four-pane layout with Gemini and Claude code loaded"
# 監視ツール付きで四分割
bind \; source-file ~/dotfiles/config/tmux-four-session-monitoring \; display-message "Four-pane layout with monitoring tools loaded"
bind C-o last-window
bind r command-prompt "rename-window %%"
bind R source-file ~/.tmux.conf \; display-message "Reload!!"
bind C-r source-file ~/.tmux.conf \; display-message "Reload!!"
bind j next-window
bind k previous-window
# 新しいWindowを作成
## デフォルトバインドの「c」を戻す
bind c new-window -c '#{pane_current_path}'
## カスタムバインドも残す
bind n new-window -c '#{pane_current_path}'
## 名前を入力して新しいWindowを作成する
bind C-n command-prompt -p "New window name:" "new-window -n '%%' -c '#{pane_current_path}'"
bind l choose-window
bind b break-pane
bind h split-window -v -c '#{pane_current_path}'
bind v split-window -h -c '#{pane_current_path}'
bind R source-file ~/.tmux.conf
bind q kill-server
bind x kill-pane
bind X kill-window
# nvimを指定して起動
bind e new-window -n editor "nvim"
bind Escape copy-mode
bind t copy-mode
bind C-t copy-mode
bind [ copy-mode
bind C-[ copy-mode
bind p paste-buffer
bind -r s swap-pane -U
bind -r Left resize-pane -L 5
bind -r Right resize-pane -R 5
bind -r Down resize-pane -D 5
bind -r Up resize-pane -U 5
bind-key C-k select-pane -U
bind-key C-j select-pane -D
bind-key C-h select-pane -L
bind-key C-l select-pane -R

# For neovim
set -g escape-time 10

# For macOS
if-shell "uname | grep -q Darwin" "source-file ~/.tmux.darwin.conf" ""

# Keyboard copy
set-option -g default-command "exec reattach-to-user-namespace -l $SHELL"
setw -g mode-keys vi
bind-key    -T copy-mode-vi v     send-keys -X begin-selection
bind-key    -T copy-mode-vi y     send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key    -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
